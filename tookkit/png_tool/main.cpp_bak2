#include <iostream>
#include <vector>
#include <png.h>

// Function to read PNG image
bool read_png_file(const char *filename, std::vector<png_bytep> &rows, png_uint_32 &width, png_uint_32 &height, int &bit_depth, int &color_type) {
    FILE *fp = fopen(filename, "rb");
    if (!fp) {
        std::cerr << "Error: Unable to open file " << filename << std::endl;
        return false;
    }

    png_structp png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (!png_ptr) {
        fclose(fp);
        return false;
    }

    png_infop info_ptr = png_create_info_struct(png_ptr);
    if (!info_ptr) {
        png_destroy_read_struct(&png_ptr, NULL, NULL);
        fclose(fp);
        return false;
    }

    png_init_io(png_ptr, fp);
    png_read_info(png_ptr, info_ptr);

    width = png_get_image_width(png_ptr, info_ptr);
    height = png_get_image_height(png_ptr, info_ptr);
    bit_depth = png_get_bit_depth(png_ptr, info_ptr);
    color_type = png_get_color_type(png_ptr, info_ptr);

    if (bit_depth == 16)
        png_set_strip_16(png_ptr);
    if (color_type == PNG_COLOR_TYPE_PALETTE)
        png_set_palette_to_rgb(png_ptr);
    if (color_type == PNG_COLOR_TYPE_GRAY && bit_depth < 8)
        png_set_expand_gray_1_2_4_to_8(png_ptr);
    if (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS))
        png_set_tRNS_to_alpha(png_ptr);

    png_read_update_info(png_ptr, info_ptr);

    rows.resize(height);
    for (png_uint_32 i = 0; i < height; ++i) {
        rows[i] = (png_bytep)malloc(png_get_rowbytes(png_ptr, info_ptr));
    }

    png_read_image(png_ptr, &rows[0]);

    png_destroy_read_struct(&png_ptr, &info_ptr, NULL);
    fclose(fp);

    return true;
}

// Function to write PNG image
bool write_png_file(const char *filename, std::vector<png_bytep> &rows, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type) {
    FILE *fp = fopen(filename, "wb");
    if (!fp) {
        std::cerr << "Error: Unable to create file " << filename << std::endl;
        return false;
    }

    png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (!png_ptr) {
        fclose(fp);
        return false;
    }

    png_infop info_ptr = png_create_info_struct(png_ptr);
    if (!info_ptr) {
        png_destroy_write_struct(&png_ptr, NULL);
        fclose(fp);
        return false;
    }

    png_init_io(png_ptr, fp);
    png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, PNG_INTERLACE_NONE, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
    png_write_info(png_ptr, info_ptr);

    png_write_image(png_ptr, &rows[0]);
    png_write_end(png_ptr, NULL);

    png_destroy_write_struct(&png_ptr, &info_ptr);
    fclose(fp);

    return true;
}

// Function to split a PNG image containing multiple PNG images into individual PNG files
bool split_png_image(const char *input_file) {
    std::vector<png_bytep> rows;
    png_uint_32 width, height;
    int bit_depth, color_type;

    // Read the input PNG image containing multiple images
    if (!read_png_file(input_file, rows, width, height, bit_depth, color_type)) {
        std::cerr << "Error reading file: " << input_file << std::endl;
        return false;
    }

    // Determine the number of images contained in the input PNG image
    // For simplicity, assuming each image has the same height
    int num_images = width / height;

    // Split the PNG image into individual PNG files
    for (int i = 0; i < num_images; ++i) {
        // Create a new vector to hold the rows of the individual image
        std::vector<png_bytep> image_rows(height);
        for (png_uint_32 j = 0; j < height; ++j) {
            image_rows[j] = rows[j] + i * width * 4; // Assuming RGBA format
        }

        // Generate filename for the individual PNG image
        std::string output_filename = std::string("output_image_") + std::to_string(i) + ".png";

        // Write the individual PNG image to file
        if (!write_png_file(output_filename.c_str(), image_rows, height, height, bit_depth, color_type)) {
            std::cerr << "Error writing file: " << output_filename << std::endl;
            return false;
        }
    }

    return true;
}

// Example usage
int main() {
    const char *input_file = "input_image.png"; // Input PNG image containing multiple images

    if (split_png_image(input_file)) {
        std::cout << "PNG image split successfully!" << std::endl;
    } else {
        std::cerr << "Failed to split PNG image." << std::endl;
    }

    return 0;
}
